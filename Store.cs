using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;

public class Store {
    private string storeName;
    private string storeAddress;
    private double balance;
    private double taxRate;
    private readonly List<Food> inventory;

    public Store(string storeName, string storeAddress, double balance, double taxRate, List<Food> inventory) {
        StoreName = storeName;
        StoreAddress = storeAddress;
        Balance = balance;
        TaxRate = taxRate;
        this.inventory = inventory;

    }

    public Store(string storeName, double balance) {
        StoreName = storeName;
        Balance = balance;
    }

    public override string ToString() {
        return $"---[ Store Information ]---\nName: {StoreName}\nBalance: {Balance:$#,##0.00}";
    }

    // If the user wants to view all the avaliable foods
    public void ViewStore() {
        List<string> categories = new();
        Console.WriteLine("===============[ Store Inventory ]================");

        foreach (var food in Inventory) {
            if (categories.Contains(food.Category) == false) {
                categories.Add(food.Category);
                Console.WriteLine($"\n---[ {food.Category} ]---");
                Console.WriteLine($"{food}");
            } else {
                Console.WriteLine($"{food}");
            }
        }

        Console.WriteLine("==================================================");
        return;
    }

    public void Greeting(string userName, double userBalance, int userAge, int cartItems) {
        Console.WriteLine("=========[ Grocery Shopping Application ]=========\n");
        Console.WriteLine($"\tYou are shopping at...\t{StoreName}\n");
        Console.WriteLine($"\tItems in cart: {cartItems}\n");
        Console.WriteLine($"> Name: {userName}");
        Console.WriteLine($"> Age: {userAge}");
        Console.WriteLine($"> Balance: {userBalance:$#,##0.00}\n");    
        Console.WriteLine("==================================================");
    }

    public void CheckOut(User user) {
        // Generates a unique store ID by getting a hash value from the store name
        // Credit: https://stackoverflow.com/questions/26870267/generate-integer-based-on-any-given-string-without-gethashcode
        MD5 md5Hasher = MD5.Create();
        var hashed = md5Hasher.ComputeHash(Encoding.UTF8.GetBytes(StoreName));
        int storeID = Math.Abs(BitConverter.ToInt32(hashed, 0));


        // StoreID is a random number generated by hashing the store name,
        Random randomNumber = new();
        string path = $"reciept-{randomNumber.Next(1000000)}.txt";
        using StreamWriter writer = new(path);

        Console.WriteLine("===========[ Transaction Information ]============");
        Console.WriteLine($"\t{StoreName.ToUpper()}");
        Console.WriteLine($"\tSTORE ID # {storeID}\n");
        Console.WriteLine($"\t{randomNumber.Next(1000)}-{randomNumber.Next(1000)}-{randomNumber.Next(10000)}\tMgr JOHN JAMESON");
        Console.WriteLine($"\t{StoreAddress.ToUpper()}");
        Console.WriteLine($"ST# {randomNumber.Next(10000)}\tOP# {randomNumber.Next(100000)}{randomNumber.Next(100000)}\tTE# {randomNumber.Next(99)}");
        writer.WriteLine("===========[ Transaction Information ]============");
        writer.WriteLine($"\t{StoreName.ToUpper()}");
        writer.WriteLine($"\tSTORE ID # {storeID}\n");
        writer.WriteLine($"\t{randomNumber.Next(1000)}-{randomNumber.Next(1000)}-{randomNumber.Next(10000)}\tMgr JOHN JAMESON");
        writer.WriteLine($"\t{StoreAddress.ToUpper()}");
        writer.WriteLine($"ST# {randomNumber.Next(10000)}\tOP# {randomNumber.Next(100000)}{randomNumber.Next(100000)}\tTE# {randomNumber.Next(99)}");

        double subtotal = 0.00;
        foreach (Food cartItem in user.Cart) {
            Console.WriteLine($"{cartItem.Name.ToUpper()}\t\t\t{cartItem.Quantity * cartItem.Price:$#,##0.00}");
            writer.WriteLine($"{cartItem.Name.ToUpper()}\t\t\t{cartItem.Quantity * cartItem.Price:$#,##0.00}");
            subtotal += (cartItem.Price * cartItem.Quantity);
        }
        
        Console.WriteLine($"\n\t\tSUBTOTAL\t{subtotal:$#,##0.00}");
        Console.WriteLine($"\t\tTAX ({TaxRate:0%})\t{(subtotal * TaxRate):$#,##0.00}");
        Console.WriteLine($"\t\tTOTAL\t\t{(subtotal + (subtotal * TaxRate)):$#,##0.00}");
        Console.WriteLine($"\t\tTEND\t\t{(subtotal + (subtotal * TaxRate)):$#,##0.00}\n");
        Console.WriteLine($"ACCOUNT #\t**** **** **** VISA");
        Console.WriteLine($"APPROVAL #\t{randomNumber.Next(1000000)}");
        Console.WriteLine($"REF #\t{randomNumber.Next(100000)}{randomNumber.Next(100000)}EC");
        Console.WriteLine($"TRANS ID - {randomNumber.Next(100000)}{randomNumber.Next(100000)}EC{randomNumber.Next(10)}D{randomNumber.Next(10)}E");
        Console.WriteLine($"VALIDATION - {randomNumber.Next(10000)}");
        Console.WriteLine($"PAYMENT SERVICE - E");
        Console.WriteLine($"TERMINAL # AE{randomNumber.Next(100)}DF{randomNumber.Next(100)}\n\n");
        Console.WriteLine("\t\tTHANK YOU!\n\n");
        Console.WriteLine($"\t{DateTime.Now.Month}/{DateTime.Now.Day}/{DateTime.Now.Year}\t{DateTime.Now.TimeOfDay}");
        Console.WriteLine($"\t# ITEMS SOLD {user.Cart.Count}");
        Console.WriteLine($"TC # {randomNumber.Next(10000)}\t{randomNumber.Next(10000)}\t{randomNumber.Next(10000)}\t{randomNumber.Next(10000)}\t{randomNumber.Next(10000)}");
        Console.WriteLine("==================================================");
        writer.WriteLine($"\n\t\tSUBTOTAL\t{subtotal:$#,##0.00}");
        writer.WriteLine($"\t\tTAX ({TaxRate:0%})\t{(subtotal * TaxRate):$#,##0.00}");
        writer.WriteLine($"\t\tTOTAL\t\t{(subtotal + (subtotal * TaxRate)):$#,##0.00}");
        writer.WriteLine($"\t\tTEND\t\t{(subtotal + (subtotal * TaxRate)):$#,##0.00}\n");
        writer.WriteLine($"ACCOUNT #\t**** **** **** VISA");
        writer.WriteLine($"APPROVAL #\t{randomNumber.Next(1000000)}");
        writer.WriteLine($"REF #\t{randomNumber.Next(100000)}{randomNumber.Next(100000)}EC");
        writer.WriteLine($"TRANS ID - {randomNumber.Next(100000)}{randomNumber.Next(100000)}EC{randomNumber.Next(10)}D{randomNumber.Next(10)}E");
        writer.WriteLine($"VALIDATION - {randomNumber.Next(10000)}");
        writer.WriteLine($"PAYMENT SERVICE - E");
        writer.WriteLine($"TERMINAL # AE{randomNumber.Next(100)}DF{randomNumber.Next(100)}\n\n");
        writer.WriteLine("\t\tTHANK YOU!\n\n");
        writer.WriteLine($"\t{DateTime.Now.Month}/{DateTime.Now.Day}/{DateTime.Now.Year}\t{DateTime.Now.TimeOfDay}");
        writer.WriteLine($"\t# ITEMS SOLD {user.Cart.Count}");
        writer.WriteLine($"TC # {randomNumber.Next(10000)}\t{randomNumber.Next(10000)}\t{randomNumber.Next(10000)}\t{randomNumber.Next(10000)}\t{randomNumber.Next(10000)}");
        writer.WriteLine("==================================================");

        return;
    }
    
    public string StoreName {
        get => storeName;
        set {
            if (string.IsNullOrWhiteSpace(value)) {
                Console.WriteLine("[!] Invalid store name! Store name was set to 'NONE' instead.");
                storeName = "NONE";
            }

            storeName = value;
        }
    }

    public string StoreAddress {
        get => storeAddress;
        set {
            storeAddress = value;
        }
    }

    public double Balance {
        get => balance;
        set {
            // Set the balance to '0' if the input is empty/null.
            if (value.GetType() != typeof(double)) {
                Console.WriteLine("[!] Invalid balance! Balance was set to '0' instead.");
                balance = 0;
                // Set the balance to '0' if the balance is less than 0.
            } else if (value < 0) {
                Console.WriteLine("[!] The balance can't be less than $0! Balance was set to '0.0' instead.");
                balance = 0;
            }

            balance = value;
        }
    }

    public double TaxRate {
        get => taxRate;
        set {
            taxRate = value;
        }
    }

    public List<Food> Inventory {
        get => inventory;
    }
}